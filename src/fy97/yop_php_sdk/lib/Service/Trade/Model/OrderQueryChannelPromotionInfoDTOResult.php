<?php
/**
 * OrderQueryChannelPromotionInfoDTOResult
 *
 * PHP version 5
 *
 * @category Class
 * @package  Fy\Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 标准交易
 *
 * <p>名称（中文）：新交易下单接口<br />名称（英文，xx.war）：opr-hessian.war<br />简介：合单支付下单与标准收款内部下单接口合并<br />wiki文档地址：http://wiki.yeepay.com/pages/viewpage.action?pageId=122095805(4.新api分组相关接口规划)<br />预计项目上线时间：2020年6月9日<br />归属/拟申请的sp编码（可选）：opr<br />期望api分组编码、名称（可选）：trade(标准交易)<br />涉及的接口：申请下单、订单查询、申请退款、退款查询</p>
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Fy\Yeepay\Yop\Sdk\Service\Trade\Model;

use \ArrayAccess;
use Fy\Yeepay\Yop\Sdk\Model\ModelInterface;
use Fy\Yeepay\Yop\Sdk\Utils\ObjectSerializer;

/**
 * OrderQueryChannelPromotionInfoDTOResult Class Doc Comment
 *
 * @category Class
 * @package  Fy\Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrderQueryChannelPromotionInfoDTOResult implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OrderQueryChannelPromotionInfoDTOResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'promotionId' => 'string',
        'promotionName' => 'string',
        'promotionScope' => 'string',
        'amount' => 'float',
        'activityId' => 'string',
        'channelContribute' => 'string',
        'merchantContribute' => 'string',
        'otherContribute' => 'string',
        'memo' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'promotionId' => null,
        'promotionName' => null,
        'promotionScope' => null,
        'amount' => null,
        'activityId' => null,
        'channelContribute' => null,
        'merchantContribute' => null,
        'otherContribute' => null,
        'memo' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'promotionId' => 'promotionId',
        'promotionName' => 'promotionName',
        'promotionScope' => 'promotionScope',
        'amount' => 'amount',
        'activityId' => 'activityId',
        'channelContribute' => 'channelContribute',
        'merchantContribute' => 'merchantContribute',
        'otherContribute' => 'otherContribute',
        'memo' => 'memo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'promotionId' => 'setPromotionId',
        'promotionName' => 'setPromotionName',
        'promotionScope' => 'setPromotionScope',
        'amount' => 'setAmount',
        'activityId' => 'setActivityId',
        'channelContribute' => 'setChannelContribute',
        'merchantContribute' => 'setMerchantContribute',
        'otherContribute' => 'setOtherContribute',
        'memo' => 'setMemo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'promotionId' => 'getPromotionId',
        'promotionName' => 'getPromotionName',
        'promotionScope' => 'getPromotionScope',
        'amount' => 'getAmount',
        'activityId' => 'getActivityId',
        'channelContribute' => 'getChannelContribute',
        'merchantContribute' => 'getMerchantContribute',
        'otherContribute' => 'getOtherContribute',
        'memo' => 'getMemo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['promotionId'] = isset($data['promotionId']) ? $data['promotionId'] : null;
        $this->container['promotionName'] = isset($data['promotionName']) ? $data['promotionName'] : null;
        $this->container['promotionScope'] = isset($data['promotionScope']) ? $data['promotionScope'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['activityId'] = isset($data['activityId']) ? $data['activityId'] : null;
        $this->container['channelContribute'] = isset($data['channelContribute']) ? $data['channelContribute'] : null;
        $this->container['merchantContribute'] = isset($data['merchantContribute']) ? $data['merchantContribute'] : null;
        $this->container['otherContribute'] = isset($data['otherContribute']) ? $data['otherContribute'] : null;
        $this->container['memo'] = isset($data['memo']) ? $data['memo'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets promotionId
     *
     * @return string
     */
    public function getPromotionId()
    {
        return $this->container['promotionId'];
    }

    /**
     * Sets promotionId
     *
     * @param string $promotionId 优惠券编码
     *
     * @return $this
     */
    public function setPromotionId($promotionId)
    {
        $this->container['promotionId'] = $promotionId;

        return $this;
    }

    /**
     * Gets promotionName
     *
     * @return string
     */
    public function getPromotionName()
    {
        return $this->container['promotionName'];
    }

    /**
     * Sets promotionName
     *
     * @param string $promotionName 优惠券名称
     *
     * @return $this
     */
    public function setPromotionName($promotionName)
    {
        $this->container['promotionName'] = $promotionName;

        return $this;
    }

    /**
     * Gets promotionScope
     *
     * @return string
     */
    public function getPromotionScope()
    {
        return $this->container['promotionScope'];
    }

    /**
     * Sets promotionScope
     *
     * @param string $promotionScope 优惠券范围
     *
     * @return $this
     */
    public function setPromotionScope($promotionScope)
    {
        $this->container['promotionScope'] = $promotionScope;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount 优惠券金额
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets activityId
     *
     * @return string
     */
    public function getActivityId()
    {
        return $this->container['activityId'];
    }

    /**
     * Sets activityId
     *
     * @param string $activityId 优惠券活动id
     *
     * @return $this
     */
    public function setActivityId($activityId)
    {
        $this->container['activityId'] = $activityId;

        return $this;
    }

    /**
     * Gets channelContribute
     *
     * @return string
     */
    public function getChannelContribute()
    {
        return $this->container['channelContribute'];
    }

    /**
     * Sets channelContribute
     *
     * @param string $channelContribute 渠道出资
     *
     * @return $this
     */
    public function setChannelContribute($channelContribute)
    {
        $this->container['channelContribute'] = $channelContribute;

        return $this;
    }

    /**
     * Gets merchantContribute
     *
     * @return string
     */
    public function getMerchantContribute()
    {
        return $this->container['merchantContribute'];
    }

    /**
     * Sets merchantContribute
     *
     * @param string $merchantContribute 商户出资
     *
     * @return $this
     */
    public function setMerchantContribute($merchantContribute)
    {
        $this->container['merchantContribute'] = $merchantContribute;

        return $this;
    }

    /**
     * Gets otherContribute
     *
     * @return string
     */
    public function getOtherContribute()
    {
        return $this->container['otherContribute'];
    }

    /**
     * Sets otherContribute
     *
     * @param string $otherContribute 其他出资
     *
     * @return $this
     */
    public function setOtherContribute($otherContribute)
    {
        $this->container['otherContribute'] = $otherContribute;

        return $this;
    }

    /**
     * Gets memo
     *
     * @return string
     */
    public function getMemo()
    {
        return $this->container['memo'];
    }

    /**
     * Sets memo
     *
     * @param string $memo 备注信息
     *
     * @return $this
     */
    public function setMemo($memo)
    {
        $this->container['memo'] = $memo;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


