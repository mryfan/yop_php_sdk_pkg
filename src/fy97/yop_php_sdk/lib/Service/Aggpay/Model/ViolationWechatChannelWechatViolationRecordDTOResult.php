<?php
/**
 * ViolationWechatChannelWechatViolationRecordDTOResult
 *
 * PHP version 5
 *
 * @category Class
 * @package  Fy\Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 聚合支付
 *
 * <p>提供聚合支付相关服务（支付下单、公众号配置等功能</p>
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Fy\Yeepay\Yop\Sdk\Service\Aggpay\Model;

use \ArrayAccess;
use Fy\Yeepay\Yop\Sdk\Model\ModelInterface;
use Fy\Yeepay\Yop\Sdk\Utils\ObjectSerializer;

/**
 * ViolationWechatChannelWechatViolationRecordDTOResult Class Doc Comment
 *
 * @category Class
 * @package  Fy\Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ViolationWechatChannelWechatViolationRecordDTOResult implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ViolationWechatChannelWechatViolationRecordDTOResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'companyName' => 'string',
        'handleMethod' => 'string',
        'handleState' => 'string',
        'illegalType' => 'string',
        'punishTime' => 'string',
        'deadline' => 'string',
        'reportMerchantNo' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'companyName' => null,
        'handleMethod' => null,
        'handleState' => null,
        'illegalType' => null,
        'punishTime' => null,
        'deadline' => null,
        'reportMerchantNo' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'companyName' => 'companyName',
        'handleMethod' => 'handleMethod',
        'handleState' => 'handleState',
        'illegalType' => 'illegalType',
        'punishTime' => 'punishTime',
        'deadline' => 'deadline',
        'reportMerchantNo' => 'reportMerchantNo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'companyName' => 'setCompanyName',
        'handleMethod' => 'setHandleMethod',
        'handleState' => 'setHandleState',
        'illegalType' => 'setIllegalType',
        'punishTime' => 'setPunishTime',
        'deadline' => 'setDeadline',
        'reportMerchantNo' => 'setReportMerchantNo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'companyName' => 'getCompanyName',
        'handleMethod' => 'getHandleMethod',
        'handleState' => 'getHandleState',
        'illegalType' => 'getIllegalType',
        'punishTime' => 'getPunishTime',
        'deadline' => 'getDeadline',
        'reportMerchantNo' => 'getReportMerchantNo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['companyName'] = isset($data['companyName']) ? $data['companyName'] : null;
        $this->container['handleMethod'] = isset($data['handleMethod']) ? $data['handleMethod'] : null;
        $this->container['handleState'] = isset($data['handleState']) ? $data['handleState'] : null;
        $this->container['illegalType'] = isset($data['illegalType']) ? $data['illegalType'] : null;
        $this->container['punishTime'] = isset($data['punishTime']) ? $data['punishTime'] : null;
        $this->container['deadline'] = isset($data['deadline']) ? $data['deadline'] : null;
        $this->container['reportMerchantNo'] = isset($data['reportMerchantNo']) ? $data['reportMerchantNo'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets companyName
     *
     * @return string
     */
    public function getCompanyName()
    {
        return $this->container['companyName'];
    }

    /**
     * Sets companyName
     *
     * @param string $companyName 公司名称
     *
     * @return $this
     */
    public function setCompanyName($companyName)
    {
        $this->container['companyName'] = $companyName;

        return $this;
    }

    /**
     * Gets handleMethod
     *
     * @return string
     */
    public function getHandleMethod()
    {
        return $this->container['handleMethod'];
    }

    /**
     * Sets handleMethod
     *
     * @param string $handleMethod 处理方式
     *
     * @return $this
     */
    public function setHandleMethod($handleMethod)
    {
        $this->container['handleMethod'] = $handleMethod;

        return $this;
    }

    /**
     * Gets handleState
     *
     * @return string
     */
    public function getHandleState()
    {
        return $this->container['handleState'];
    }

    /**
     * Sets handleState
     *
     * @param string $handleState 处理状态
     *
     * @return $this
     */
    public function setHandleState($handleState)
    {
        $this->container['handleState'] = $handleState;

        return $this;
    }

    /**
     * Gets illegalType
     *
     * @return string
     */
    public function getIllegalType()
    {
        return $this->container['illegalType'];
    }

    /**
     * Sets illegalType
     *
     * @param string $illegalType 违规类型
     *
     * @return $this
     */
    public function setIllegalType($illegalType)
    {
        $this->container['illegalType'] = $illegalType;

        return $this;
    }

    /**
     * Gets punishTime
     *
     * @return string
     */
    public function getPunishTime()
    {
        return $this->container['punishTime'];
    }

    /**
     * Sets punishTime
     *
     * @param string $punishTime 处罚时间
     *
     * @return $this
     */
    public function setPunishTime($punishTime)
    {
        $this->container['punishTime'] = $punishTime;

        return $this;
    }

    /**
     * Gets deadline
     *
     * @return string
     */
    public function getDeadline()
    {
        return $this->container['deadline'];
    }

    /**
     * Sets deadline
     *
     * @param string $deadline 最后处理时间
     *
     * @return $this
     */
    public function setDeadline($deadline)
    {
        $this->container['deadline'] = $deadline;

        return $this;
    }

    /**
     * Gets reportMerchantNo
     *
     * @return string
     */
    public function getReportMerchantNo()
    {
        return $this->container['reportMerchantNo'];
    }

    /**
     * Sets reportMerchantNo
     *
     * @param string $reportMerchantNo 违规子商户号-报备商户号
     *
     * @return $this
     */
    public function setReportMerchantNo($reportMerchantNo)
    {
        $this->container['reportMerchantNo'] = $reportMerchantNo;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


