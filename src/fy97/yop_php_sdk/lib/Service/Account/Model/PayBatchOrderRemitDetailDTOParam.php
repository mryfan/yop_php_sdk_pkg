<?php
/**
 * PayBatchOrderRemitDetailDTOParam
 *
 * PHP version 5
 *
 * @category Class
 * @package  Fy\Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * è´¦æˆ·
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Fy\Yeepay\Yop\Sdk\Service\Account\Model;

use \ArrayAccess;
use Fy\Yeepay\Yop\Sdk\Model\ModelInterface;
use Fy\Yeepay\Yop\Sdk\Utils\ObjectSerializer;

/**
 * PayBatchOrderRemitDetailDTOParam Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  Fy\Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PayBatchOrderRemitDetailDTOParam implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PayBatchOrderRemitDetailDTOParam';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'requestNo' => 'string',
        'receiverAccountNo' => 'string',
        'receiverAccountName' => 'string',
        'receiverBankCode' => 'string',
        'orderAmount' => 'float',
        'comments' => 'string',
        'bankAccountType' => 'string',
        'branchBankCode' => 'string',
        'feeChargeSide' => 'string',
        'remark' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'requestNo' => null,
        'receiverAccountNo' => null,
        'receiverAccountName' => null,
        'receiverBankCode' => null,
        'orderAmount' => null,
        'comments' => null,
        'bankAccountType' => null,
        'branchBankCode' => null,
        'feeChargeSide' => null,
        'remark' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'requestNo' => 'requestNo',
        'receiverAccountNo' => 'receiverAccountNo',
        'receiverAccountName' => 'receiverAccountName',
        'receiverBankCode' => 'receiverBankCode',
        'orderAmount' => 'orderAmount',
        'comments' => 'comments',
        'bankAccountType' => 'bankAccountType',
        'branchBankCode' => 'branchBankCode',
        'feeChargeSide' => 'feeChargeSide',
        'remark' => 'remark'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'requestNo' => 'setRequestNo',
        'receiverAccountNo' => 'setReceiverAccountNo',
        'receiverAccountName' => 'setReceiverAccountName',
        'receiverBankCode' => 'setReceiverBankCode',
        'orderAmount' => 'setOrderAmount',
        'comments' => 'setComments',
        'bankAccountType' => 'setBankAccountType',
        'branchBankCode' => 'setBranchBankCode',
        'feeChargeSide' => 'setFeeChargeSide',
        'remark' => 'setRemark'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'requestNo' => 'getRequestNo',
        'receiverAccountNo' => 'getReceiverAccountNo',
        'receiverAccountName' => 'getReceiverAccountName',
        'receiverBankCode' => 'getReceiverBankCode',
        'orderAmount' => 'getOrderAmount',
        'comments' => 'getComments',
        'bankAccountType' => 'getBankAccountType',
        'branchBankCode' => 'getBranchBankCode',
        'feeChargeSide' => 'getFeeChargeSide',
        'remark' => 'getRemark'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['requestNo'] = isset($data['requestNo']) ? $data['requestNo'] : null;
        $this->container['receiverAccountNo'] = isset($data['receiverAccountNo']) ? $data['receiverAccountNo'] : null;
        $this->container['receiverAccountName'] = isset($data['receiverAccountName']) ? $data['receiverAccountName'] : null;
        $this->container['receiverBankCode'] = isset($data['receiverBankCode']) ? $data['receiverBankCode'] : null;
        $this->container['orderAmount'] = isset($data['orderAmount']) ? $data['orderAmount'] : null;
        $this->container['comments'] = isset($data['comments']) ? $data['comments'] : null;
        $this->container['bankAccountType'] = isset($data['bankAccountType']) ? $data['bankAccountType'] : null;
        $this->container['branchBankCode'] = isset($data['branchBankCode']) ? $data['branchBankCode'] : null;
        $this->container['feeChargeSide'] = isset($data['feeChargeSide']) ? $data['feeChargeSide'] : null;
        $this->container['remark'] = isset($data['remark']) ? $data['remark'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets requestNo
     *
     * @return string
     */
    public function getRequestNo()
    {
        return $this->container['requestNo'];
    }

    /**
     * Sets requestNo
     *
     * @param string $requestNo requestNo
     *
     * @return $this
     */
    public function setRequestNo($requestNo)
    {
        $this->container['requestNo'] = $requestNo;

        return $this;
    }

    /**
     * Gets receiverAccountNo
     *
     * @return string
     */
    public function getReceiverAccountNo()
    {
        return $this->container['receiverAccountNo'];
    }

    /**
     * Sets receiverAccountNo
     *
     * @param string $receiverAccountNo receiverAccountNo
     *
     * @return $this
     */
    public function setReceiverAccountNo($receiverAccountNo)
    {
        $this->container['receiverAccountNo'] = $receiverAccountNo;

        return $this;
    }

    /**
     * Gets receiverAccountName
     *
     * @return string
     */
    public function getReceiverAccountName()
    {
        return $this->container['receiverAccountName'];
    }

    /**
     * Sets receiverAccountName
     *
     * @param string $receiverAccountName receiverAccountName
     *
     * @return $this
     */
    public function setReceiverAccountName($receiverAccountName)
    {
        $this->container['receiverAccountName'] = $receiverAccountName;

        return $this;
    }

    /**
     * Gets receiverBankCode
     *
     * @return string
     */
    public function getReceiverBankCode()
    {
        return $this->container['receiverBankCode'];
    }

    /**
     * Sets receiverBankCode
     *
     * @param string $receiverBankCode receiverBankCode
     *
     * @return $this
     */
    public function setReceiverBankCode($receiverBankCode)
    {
        $this->container['receiverBankCode'] = $receiverBankCode;

        return $this;
    }

    /**
     * Gets orderAmount
     *
     * @return float
     */
    public function getOrderAmount()
    {
        return $this->container['orderAmount'];
    }

    /**
     * Sets orderAmount
     *
     * @param float $orderAmount orderAmount
     *
     * @return $this
     */
    public function setOrderAmount($orderAmount)
    {
        $this->container['orderAmount'] = $orderAmount;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string $comments comments
     *
     * @return $this
     */
    public function setComments($comments)
    {
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets bankAccountType
     *
     * @return string
     */
    public function getBankAccountType()
    {
        return $this->container['bankAccountType'];
    }

    /**
     * Sets bankAccountType
     *
     * @param string $bankAccountType bankAccountType
     *
     * @return $this
     */
    public function setBankAccountType($bankAccountType)
    {
        $this->container['bankAccountType'] = $bankAccountType;

        return $this;
    }

    /**
     * Gets branchBankCode
     *
     * @return string
     */
    public function getBranchBankCode()
    {
        return $this->container['branchBankCode'];
    }

    /**
     * Sets branchBankCode
     *
     * @param string $branchBankCode branchBankCode
     *
     * @return $this
     */
    public function setBranchBankCode($branchBankCode)
    {
        $this->container['branchBankCode'] = $branchBankCode;

        return $this;
    }

    /**
     * Gets feeChargeSide
     *
     * @return string
     */
    public function getFeeChargeSide()
    {
        return $this->container['feeChargeSide'];
    }

    /**
     * Sets feeChargeSide
     *
     * @param string $feeChargeSide feeChargeSide
     *
     * @return $this
     */
    public function setFeeChargeSide($feeChargeSide)
    {
        $this->container['feeChargeSide'] = $feeChargeSide;

        return $this;
    }

    /**
     * Gets remark
     *
     * @return string
     */
    public function getRemark()
    {
        return $this->container['remark'];
    }

    /**
     * Sets remark
     *
     * @param string $remark remark
     *
     * @return $this
     */
    public function setRemark($remark)
    {
        $this->container['remark'] = $remark;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


