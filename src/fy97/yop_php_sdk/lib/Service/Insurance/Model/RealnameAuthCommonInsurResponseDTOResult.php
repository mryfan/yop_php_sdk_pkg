<?php
/**
 * RealnameAuthCommonInsurResponseDTOResult
 *
 * PHP version 5
 *
 * @category Class
 * @package  Fy\Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 保险
 *
 * <p>根据银保监会的文件要求，保险行业财产险公司的车险业务，用户在投保缴费（微信&amp;支付宝&amp;银行卡）之前，必须要完成支付人的实名验证，确保支付人与投保人一致才能缴费。目前实名认证存在四种模式，分别为：中保信模式、上海模式、深圳模式和江苏模式，其中中保信模式和上海模式要求支付机构与实名平台专线对接（已有专线），深圳和江苏是公网对接。因实名平台的接口仅支持有支付牌照的收单机构对接，所以部署一套单独的保险实名认证服务在易宝中台，支撑保险商户业务的正常进行。</p>
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Fy\Yeepay\Yop\Sdk\Service\Insurance\Model;

use \ArrayAccess;
use Fy\Yeepay\Yop\Sdk\Model\ModelInterface;
use Fy\Yeepay\Yop\Sdk\Utils\ObjectSerializer;

/**
 * RealnameAuthCommonInsurResponseDTOResult Class Doc Comment
 *
 * @category Class
 * @package  Fy\Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RealnameAuthCommonInsurResponseDTOResult implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RealnameAuthCommonInsurResponseDTOResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'code' => 'string',
        'msg' => 'string',
        'status' => 'string',
        'customerNo' => 'string',
        'merchantNo' => 'string',
        'queryNo' => 'string',
        'terminalNo' => 'string',
        'tradeNo' => 'string',
        'amount' => 'string',
        'validateSequenceNo' => 'string',
        'pealNamePaymentFlag' => 'string',
        'requestType' => 'string',
        'requestCode' => 'string',
        'transDate' => 'string',
        'customerDataDTOS' => '\Fy\Yeepay\Yop\Sdk\Service\Insurance\Model\RealnameAuthCustomerDataDTOResult[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'code' => null,
        'msg' => null,
        'status' => null,
        'customerNo' => null,
        'merchantNo' => null,
        'queryNo' => null,
        'terminalNo' => null,
        'tradeNo' => null,
        'amount' => null,
        'validateSequenceNo' => null,
        'pealNamePaymentFlag' => null,
        'requestType' => null,
        'requestCode' => null,
        'transDate' => null,
        'customerDataDTOS' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'code' => 'code',
        'msg' => 'msg',
        'status' => 'status',
        'customerNo' => 'customerNo',
        'merchantNo' => 'merchantNo',
        'queryNo' => 'queryNo',
        'terminalNo' => 'terminalNo',
        'tradeNo' => 'tradeNo',
        'amount' => 'amount',
        'validateSequenceNo' => 'validateSequenceNo',
        'pealNamePaymentFlag' => 'pealNamePaymentFlag',
        'requestType' => 'requestType',
        'requestCode' => 'requestCode',
        'transDate' => 'transDate',
        'customerDataDTOS' => 'customerDataDTOS'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'code' => 'setCode',
        'msg' => 'setMsg',
        'status' => 'setStatus',
        'customerNo' => 'setCustomerNo',
        'merchantNo' => 'setMerchantNo',
        'queryNo' => 'setQueryNo',
        'terminalNo' => 'setTerminalNo',
        'tradeNo' => 'setTradeNo',
        'amount' => 'setAmount',
        'validateSequenceNo' => 'setValidateSequenceNo',
        'pealNamePaymentFlag' => 'setPealNamePaymentFlag',
        'requestType' => 'setRequestType',
        'requestCode' => 'setRequestCode',
        'transDate' => 'setTransDate',
        'customerDataDTOS' => 'setCustomerDataDTOS'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'code' => 'getCode',
        'msg' => 'getMsg',
        'status' => 'getStatus',
        'customerNo' => 'getCustomerNo',
        'merchantNo' => 'getMerchantNo',
        'queryNo' => 'getQueryNo',
        'terminalNo' => 'getTerminalNo',
        'tradeNo' => 'getTradeNo',
        'amount' => 'getAmount',
        'validateSequenceNo' => 'getValidateSequenceNo',
        'pealNamePaymentFlag' => 'getPealNamePaymentFlag',
        'requestType' => 'getRequestType',
        'requestCode' => 'getRequestCode',
        'transDate' => 'getTransDate',
        'customerDataDTOS' => 'getCustomerDataDTOS'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['msg'] = isset($data['msg']) ? $data['msg'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['customerNo'] = isset($data['customerNo']) ? $data['customerNo'] : null;
        $this->container['merchantNo'] = isset($data['merchantNo']) ? $data['merchantNo'] : null;
        $this->container['queryNo'] = isset($data['queryNo']) ? $data['queryNo'] : null;
        $this->container['terminalNo'] = isset($data['terminalNo']) ? $data['terminalNo'] : null;
        $this->container['tradeNo'] = isset($data['tradeNo']) ? $data['tradeNo'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['validateSequenceNo'] = isset($data['validateSequenceNo']) ? $data['validateSequenceNo'] : null;
        $this->container['pealNamePaymentFlag'] = isset($data['pealNamePaymentFlag']) ? $data['pealNamePaymentFlag'] : null;
        $this->container['requestType'] = isset($data['requestType']) ? $data['requestType'] : null;
        $this->container['requestCode'] = isset($data['requestCode']) ? $data['requestCode'] : null;
        $this->container['transDate'] = isset($data['transDate']) ? $data['transDate'] : null;
        $this->container['customerDataDTOS'] = isset($data['customerDataDTOS']) ? $data['customerDataDTOS'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code 未命名
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets msg
     *
     * @return string
     */
    public function getMsg()
    {
        return $this->container['msg'];
    }

    /**
     * Sets msg
     *
     * @param string $msg 未命名
     *
     * @return $this
     */
    public function setMsg($msg)
    {
        $this->container['msg'] = $msg;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status 状态
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets customerNo
     *
     * @return string
     */
    public function getCustomerNo()
    {
        return $this->container['customerNo'];
    }

    /**
     * Sets customerNo
     *
     * @param string $customerNo 客户编号
     *
     * @return $this
     */
    public function setCustomerNo($customerNo)
    {
        $this->container['customerNo'] = $customerNo;

        return $this;
    }

    /**
     * Gets merchantNo
     *
     * @return string
     */
    public function getMerchantNo()
    {
        return $this->container['merchantNo'];
    }

    /**
     * Sets merchantNo
     *
     * @param string $merchantNo 商户编号
     *
     * @return $this
     */
    public function setMerchantNo($merchantNo)
    {
        $this->container['merchantNo'] = $merchantNo;

        return $this;
    }

    /**
     * Gets queryNo
     *
     * @return string
     */
    public function getQueryNo()
    {
        return $this->container['queryNo'];
    }

    /**
     * Sets queryNo
     *
     * @param string $queryNo 查询编号
     *
     * @return $this
     */
    public function setQueryNo($queryNo)
    {
        $this->container['queryNo'] = $queryNo;

        return $this;
    }

    /**
     * Gets terminalNo
     *
     * @return string
     */
    public function getTerminalNo()
    {
        return $this->container['terminalNo'];
    }

    /**
     * Sets terminalNo
     *
     * @param string $terminalNo 终端号
     *
     * @return $this
     */
    public function setTerminalNo($terminalNo)
    {
        $this->container['terminalNo'] = $terminalNo;

        return $this;
    }

    /**
     * Gets tradeNo
     *
     * @return string
     */
    public function getTradeNo()
    {
        return $this->container['tradeNo'];
    }

    /**
     * Sets tradeNo
     *
     * @param string $tradeNo 交易流水号
     *
     * @return $this
     */
    public function setTradeNo($tradeNo)
    {
        $this->container['tradeNo'] = $tradeNo;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return string
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param string $amount 金额
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets validateSequenceNo
     *
     * @return string
     */
    public function getValidateSequenceNo()
    {
        return $this->container['validateSequenceNo'];
    }

    /**
     * Sets validateSequenceNo
     *
     * @param string $validateSequenceNo 认证序列号
     *
     * @return $this
     */
    public function setValidateSequenceNo($validateSequenceNo)
    {
        $this->container['validateSequenceNo'] = $validateSequenceNo;

        return $this;
    }

    /**
     * Gets pealNamePaymentFlag
     *
     * @return string
     */
    public function getPealNamePaymentFlag()
    {
        return $this->container['pealNamePaymentFlag'];
    }

    /**
     * Sets pealNamePaymentFlag
     *
     * @param string $pealNamePaymentFlag 实名缴费标识
     *
     * @return $this
     */
    public function setPealNamePaymentFlag($pealNamePaymentFlag)
    {
        $this->container['pealNamePaymentFlag'] = $pealNamePaymentFlag;

        return $this;
    }

    /**
     * Gets requestType
     *
     * @return string
     */
    public function getRequestType()
    {
        return $this->container['requestType'];
    }

    /**
     * Sets requestType
     *
     * @param string $requestType 请求类型
     *
     * @return $this
     */
    public function setRequestType($requestType)
    {
        $this->container['requestType'] = $requestType;

        return $this;
    }

    /**
     * Gets requestCode
     *
     * @return string
     */
    public function getRequestCode()
    {
        return $this->container['requestCode'];
    }

    /**
     * Sets requestCode
     *
     * @param string $requestCode 请求编码
     *
     * @return $this
     */
    public function setRequestCode($requestCode)
    {
        $this->container['requestCode'] = $requestCode;

        return $this;
    }

    /**
     * Gets transDate
     *
     * @return string
     */
    public function getTransDate()
    {
        return $this->container['transDate'];
    }

    /**
     * Sets transDate
     *
     * @param string $transDate 业务交易完成时间
     *
     * @return $this
     */
    public function setTransDate($transDate)
    {
        $this->container['transDate'] = $transDate;

        return $this;
    }

    /**
     * Gets customerDataDTOS
     *
     * @return \Fy\Yeepay\Yop\Sdk\Service\Insurance\Model\RealnameAuthCustomerDataDTOResult[]
     */
    public function getCustomerDataDTOS()
    {
        return $this->container['customerDataDTOS'];
    }

    /**
     * Sets customerDataDTOS
     *
     * @param \Fy\Yeepay\Yop\Sdk\Service\Insurance\Model\RealnameAuthCustomerDataDTOResult[] $customerDataDTOS 客户信息集合
     *
     * @return $this
     */
    public function setCustomerDataDTOS($customerDataDTOS)
    {
        $this->container['customerDataDTOS'] = $customerDataDTOS;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


