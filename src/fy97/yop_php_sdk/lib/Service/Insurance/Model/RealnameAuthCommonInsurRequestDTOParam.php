<?php
/**
 * RealnameAuthCommonInsurRequestDTOParam
 *
 * PHP version 5
 *
 * @category Class
 * @package  Fy\Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 保险
 *
 * <p>根据银保监会的文件要求，保险行业财产险公司的车险业务，用户在投保缴费（微信&amp;支付宝&amp;银行卡）之前，必须要完成支付人的实名验证，确保支付人与投保人一致才能缴费。目前实名认证存在四种模式，分别为：中保信模式、上海模式、深圳模式和江苏模式，其中中保信模式和上海模式要求支付机构与实名平台专线对接（已有专线），深圳和江苏是公网对接。因实名平台的接口仅支持有支付牌照的收单机构对接，所以部署一套单独的保险实名认证服务在易宝中台，支撑保险商户业务的正常进行。</p>
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Fy\Yeepay\Yop\Sdk\Service\Insurance\Model;

use \ArrayAccess;
use Fy\Yeepay\Yop\Sdk\Model\ModelInterface;
use Fy\Yeepay\Yop\Sdk\Utils\ObjectSerializer;

/**
 * RealnameAuthCommonInsurRequestDTOParam Class Doc Comment
 *
 * @category Class
 * @description 方法签名第0个参数，请自行修改arg0等参数的名字
 * @package  Fy\Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RealnameAuthCommonInsurRequestDTOParam implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RealnameAuthCommonInsurRequestDTOParam';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'appkey' => 'string',
        'requestNo' => 'string',
        'customerNo' => 'string',
        'requestType' => 'string',
        'cardNo' => 'string',
        'payerIdCard' => 'string',
        'payerName' => 'string',
        'paymentNo' => 'string',
        'queryNo' => 'string',
        'taskNumbers' => 'string',
        'totalAmount' => 'string',
        'tradeNo' => 'string',
        'date' => 'string',
        'validateSequenceNo' => 'string',
        'tradingBackDataDTOS' => '\Fy\Yeepay\Yop\Sdk\Service\Insurance\Model\RealnameAuthTradingBackDataDTOParam[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'appkey' => null,
        'requestNo' => null,
        'customerNo' => null,
        'requestType' => null,
        'cardNo' => null,
        'payerIdCard' => null,
        'payerName' => null,
        'paymentNo' => null,
        'queryNo' => null,
        'taskNumbers' => null,
        'totalAmount' => null,
        'tradeNo' => null,
        'date' => null,
        'validateSequenceNo' => null,
        'tradingBackDataDTOS' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'appkey' => 'appkey',
        'requestNo' => 'requestNo',
        'customerNo' => 'customerNo',
        'requestType' => 'requestType',
        'cardNo' => 'cardNo',
        'payerIdCard' => 'payerIdCard',
        'payerName' => 'payerName',
        'paymentNo' => 'paymentNo',
        'queryNo' => 'queryNo',
        'taskNumbers' => 'taskNumbers',
        'totalAmount' => 'totalAmount',
        'tradeNo' => 'tradeNo',
        'date' => 'date',
        'validateSequenceNo' => 'validateSequenceNo',
        'tradingBackDataDTOS' => 'tradingBackDataDTOS'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'appkey' => 'setAppkey',
        'requestNo' => 'setRequestNo',
        'customerNo' => 'setCustomerNo',
        'requestType' => 'setRequestType',
        'cardNo' => 'setCardNo',
        'payerIdCard' => 'setPayerIdCard',
        'payerName' => 'setPayerName',
        'paymentNo' => 'setPaymentNo',
        'queryNo' => 'setQueryNo',
        'taskNumbers' => 'setTaskNumbers',
        'totalAmount' => 'setTotalAmount',
        'tradeNo' => 'setTradeNo',
        'date' => 'setDate',
        'validateSequenceNo' => 'setValidateSequenceNo',
        'tradingBackDataDTOS' => 'setTradingBackDataDTOS'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'appkey' => 'getAppkey',
        'requestNo' => 'getRequestNo',
        'customerNo' => 'getCustomerNo',
        'requestType' => 'getRequestType',
        'cardNo' => 'getCardNo',
        'payerIdCard' => 'getPayerIdCard',
        'payerName' => 'getPayerName',
        'paymentNo' => 'getPaymentNo',
        'queryNo' => 'getQueryNo',
        'taskNumbers' => 'getTaskNumbers',
        'totalAmount' => 'getTotalAmount',
        'tradeNo' => 'getTradeNo',
        'date' => 'getDate',
        'validateSequenceNo' => 'getValidateSequenceNo',
        'tradingBackDataDTOS' => 'getTradingBackDataDTOS'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['appkey'] = isset($data['appkey']) ? $data['appkey'] : null;
        $this->container['requestNo'] = isset($data['requestNo']) ? $data['requestNo'] : null;
        $this->container['customerNo'] = isset($data['customerNo']) ? $data['customerNo'] : null;
        $this->container['requestType'] = isset($data['requestType']) ? $data['requestType'] : null;
        $this->container['cardNo'] = isset($data['cardNo']) ? $data['cardNo'] : null;
        $this->container['payerIdCard'] = isset($data['payerIdCard']) ? $data['payerIdCard'] : null;
        $this->container['payerName'] = isset($data['payerName']) ? $data['payerName'] : null;
        $this->container['paymentNo'] = isset($data['paymentNo']) ? $data['paymentNo'] : null;
        $this->container['queryNo'] = isset($data['queryNo']) ? $data['queryNo'] : null;
        $this->container['taskNumbers'] = isset($data['taskNumbers']) ? $data['taskNumbers'] : null;
        $this->container['totalAmount'] = isset($data['totalAmount']) ? $data['totalAmount'] : null;
        $this->container['tradeNo'] = isset($data['tradeNo']) ? $data['tradeNo'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['validateSequenceNo'] = isset($data['validateSequenceNo']) ? $data['validateSequenceNo'] : null;
        $this->container['tradingBackDataDTOS'] = isset($data['tradingBackDataDTOS']) ? $data['tradingBackDataDTOS'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets appkey
     *
     * @return string
     */
    public function getAppkey()
    {
        return $this->container['appkey'];
    }

    /**
     * Sets appkey
     *
     * @param string $appkey appkey
     *
     * @return $this
     */
    public function setAppkey($appkey)
    {
        $this->container['appkey'] = $appkey;

        return $this;
    }

    /**
     * Gets requestNo
     *
     * @return string
     */
    public function getRequestNo()
    {
        return $this->container['requestNo'];
    }

    /**
     * Sets requestNo
     *
     * @param string $requestNo requestNo
     *
     * @return $this
     */
    public function setRequestNo($requestNo)
    {
        $this->container['requestNo'] = $requestNo;

        return $this;
    }

    /**
     * Gets customerNo
     *
     * @return string
     */
    public function getCustomerNo()
    {
        return $this->container['customerNo'];
    }

    /**
     * Sets customerNo
     *
     * @param string $customerNo customerNo
     *
     * @return $this
     */
    public function setCustomerNo($customerNo)
    {
        $this->container['customerNo'] = $customerNo;

        return $this;
    }

    /**
     * Gets requestType
     *
     * @return string
     */
    public function getRequestType()
    {
        return $this->container['requestType'];
    }

    /**
     * Sets requestType
     *
     * @param string $requestType requestType
     *
     * @return $this
     */
    public function setRequestType($requestType)
    {
        $this->container['requestType'] = $requestType;

        return $this;
    }

    /**
     * Gets cardNo
     *
     * @return string
     */
    public function getCardNo()
    {
        return $this->container['cardNo'];
    }

    /**
     * Sets cardNo
     *
     * @param string $cardNo cardNo
     *
     * @return $this
     */
    public function setCardNo($cardNo)
    {
        $this->container['cardNo'] = $cardNo;

        return $this;
    }

    /**
     * Gets payerIdCard
     *
     * @return string
     */
    public function getPayerIdCard()
    {
        return $this->container['payerIdCard'];
    }

    /**
     * Sets payerIdCard
     *
     * @param string $payerIdCard payerIdCard
     *
     * @return $this
     */
    public function setPayerIdCard($payerIdCard)
    {
        $this->container['payerIdCard'] = $payerIdCard;

        return $this;
    }

    /**
     * Gets payerName
     *
     * @return string
     */
    public function getPayerName()
    {
        return $this->container['payerName'];
    }

    /**
     * Sets payerName
     *
     * @param string $payerName payerName
     *
     * @return $this
     */
    public function setPayerName($payerName)
    {
        $this->container['payerName'] = $payerName;

        return $this;
    }

    /**
     * Gets paymentNo
     *
     * @return string
     */
    public function getPaymentNo()
    {
        return $this->container['paymentNo'];
    }

    /**
     * Sets paymentNo
     *
     * @param string $paymentNo paymentNo
     *
     * @return $this
     */
    public function setPaymentNo($paymentNo)
    {
        $this->container['paymentNo'] = $paymentNo;

        return $this;
    }

    /**
     * Gets queryNo
     *
     * @return string
     */
    public function getQueryNo()
    {
        return $this->container['queryNo'];
    }

    /**
     * Sets queryNo
     *
     * @param string $queryNo queryNo
     *
     * @return $this
     */
    public function setQueryNo($queryNo)
    {
        $this->container['queryNo'] = $queryNo;

        return $this;
    }

    /**
     * Gets taskNumbers
     *
     * @return string
     */
    public function getTaskNumbers()
    {
        return $this->container['taskNumbers'];
    }

    /**
     * Sets taskNumbers
     *
     * @param string $taskNumbers taskNumbers
     *
     * @return $this
     */
    public function setTaskNumbers($taskNumbers)
    {
        $this->container['taskNumbers'] = $taskNumbers;

        return $this;
    }

    /**
     * Gets totalAmount
     *
     * @return string
     */
    public function getTotalAmount()
    {
        return $this->container['totalAmount'];
    }

    /**
     * Sets totalAmount
     *
     * @param string $totalAmount totalAmount
     *
     * @return $this
     */
    public function setTotalAmount($totalAmount)
    {
        $this->container['totalAmount'] = $totalAmount;

        return $this;
    }

    /**
     * Gets tradeNo
     *
     * @return string
     */
    public function getTradeNo()
    {
        return $this->container['tradeNo'];
    }

    /**
     * Sets tradeNo
     *
     * @param string $tradeNo tradeNo
     *
     * @return $this
     */
    public function setTradeNo($tradeNo)
    {
        $this->container['tradeNo'] = $tradeNo;

        return $this;
    }

    /**
     * Gets date
     *
     * @return string
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param string $date date
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets validateSequenceNo
     *
     * @return string
     */
    public function getValidateSequenceNo()
    {
        return $this->container['validateSequenceNo'];
    }

    /**
     * Sets validateSequenceNo
     *
     * @param string $validateSequenceNo validateSequenceNo
     *
     * @return $this
     */
    public function setValidateSequenceNo($validateSequenceNo)
    {
        $this->container['validateSequenceNo'] = $validateSequenceNo;

        return $this;
    }

    /**
     * Gets tradingBackDataDTOS
     *
     * @return \Fy\Yeepay\Yop\Sdk\Service\Insurance\Model\RealnameAuthTradingBackDataDTOParam[]
     */
    public function getTradingBackDataDTOS()
    {
        return $this->container['tradingBackDataDTOS'];
    }

    /**
     * Sets tradingBackDataDTOS
     *
     * @param \Fy\Yeepay\Yop\Sdk\Service\Insurance\Model\RealnameAuthTradingBackDataDTOParam[] $tradingBackDataDTOS tradingBackDataDTOS
     *
     * @return $this
     */
    public function setTradingBackDataDTOS($tradingBackDataDTOS)
    {
        $this->container['tradingBackDataDTOS'] = $tradingBackDataDTOS;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


